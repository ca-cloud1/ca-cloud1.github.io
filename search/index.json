[["Intro to Python","2022年09月09日","/2022/09/15/intro-to-python.html/"," TalkPython: Python for Absolute Beginners A review by Claudia Althoen I recently went through the talk python course and below is my review. Python for Absolute Beginners is a succinct course that both aids as a refresher and an easy way to get started with Python. Within the course, there are guided lessons where you follow along in your own coding software, (in the course, they use PyCharm), and practices you go through on your own that you can then check with their solutions. All the code, practices, and solutions for the course can be found on their GitHub site: https://github.com/talkpython/python-for-absolute-beginners-course And the URL for the course website is: https://training.talkpython.fm/courses/details/python-for-absolute-beginners There were times when I found myself stuck on code, despite following along with every part in the videos, and if this happens to you, I suggest checking out the “Code” in the GitHub before you spend too long being frustrated with the code. It happens a few times when the code was incorrect or not updated in the videos, but is updated in the GitHub files. The videos aren’t perfect, but being able to go through bit by bit for different examples is helpful. With this course, the videos go through writing software and debugging fun little games that you create, such as rock paper scissors and tic-tac-toe. The course starts out with guiding the learner in the basics of why python is both a powerful and useful language, as well as how to set up Python. While not perfect in its execution (like most things), chapter two presents helpful guidance in setting up and using PyCharm, an IDE for Python. I’ve had experiences before where a course will just show you how to set up an IDE, but not actually show you how to use each part in the IDE once you finally have it open. I had that issue for using the debugger in PyCharm—the video in the course didn’t show you how to make the debugger appear and so the assumption was that it was already there for you when you click on it, which was not the case for me. So, I did have to do a bit of googling to figure out the solution to my issue. Nevertheless, the course has been very useful just for seeing again and again how to open files, how to name them, and so on in PyCharm. For an in-depth guide for every single part of the PyCharm IDE, I suggest doing additional learning outside the course. Not everything is explained in the course, but enough was so that I felt like I walked away from the course having a good, basic understanding of python and using PyCharm as an IDE. There were some things that were used in the videos without a brief explanation as to why, but as you go along in the course, your brain eventually has the ‘aha’ moment (or it is explained in the video later on). If not, it was easy enough to search for it on the internet. There are three programs you will code in the course: an M\u0026amp;M guessing game, rock paper scissors, and tic-tac-toe. One of my favorites to code was the M\u0026amp;M guessing game mainly because of how much fun it was to get creative with it when it said in the practice to remake the guessing game. I printed in the shape of a jar, added sarcastic responses if the user did not guess correctly, and different responses depending on how many guesses it took to get right. For example, if the user responded with their nationality as Canadian, I shrunk the range of possibility for the right guess to help the user out by saying that Tim Hortons M\u0026amp;M-napped some M\u0026amp;Ms for timbits and now the range they’re guessing from is ___. Like with writing, a book, every author of their code does things and expresses things a bit differently, but the underlying structure remains: sentences, punctuation, a story arc or purpose, etc. Looking back at my code compared to what I learned in further lessons of the course, there is definitely a lot to change and improve on, but the fact that I can see where I can improve in my code means that I learned more than I thought I did. I was able to apply what I learned, and I left feeling a desire to keep learning and exploring all the things code can do for us. The ability for the user to interact efficiently with whatever program you’ve written is important. In the course, changing the color of font is introduced by using colorama, an external library. In this code above, font colors from colorama is imported into the program. The text for \u0026ldquo;Try again!\u0026rdquo; becomes light red and the text for \u0026ldquo;continue\u0026rdquo; is white. Being able to change the color of the font is important if you don’t want your user to get frustrated or annoyed; you want them to be able to quickly understand what is going on. The code below is an example of using an F string. So, in this code, the user is asked to guess the number of M\u0026amp;Ms in the jar as long as their attempt limit is under the max allowed. ` If they guessed correctly, the program would tell them that they got a free lunch and what the guess was. One of the practice exercises afterwards was to remake the m\u0026amp;m guessing game, but in your own way, so I changed the above code to: I wanted to play around with segmenting the successful attempts and to have fun with the responses to however many it took the user to guess correctly. I had 10 as the max attempt limit. In making the rock paper scissors game, I got a lot of practice with defining functions: And another example: The course also spent time teaching about dictionaries and creating virtual environments. For the rock paper scissor game, there was a task of importing and using JSON, which is very similar to dictionaries in Python. Instead of having all of this as part of the program code I was able to make this as a json file called \u0026lsquo;rolls.json\u0026rsquo;. In the Pyscript, I simply have to call it. Another subject that the course covered was error handling. Now, whenever I write code, I think about \u0026ldquo;how can this code \u0026lsquo;break\u0026rsquo; and what can I do to prevent it?\u0026rdquo; For example, when making the Connect 4 game (similar code to tictactoe), there was an issue when telling the program what location you choose. When it asked \u0026ldquo;Choose which column: \u0026ldquo;, it was very simple to break it just by putting in extra numbers or mistyping. Therefore, in order to mitigate this issue, this was the solution: With this solution to the error, now the game won\u0026rsquo;t break and quit out of the program. This course alone isn\u0026rsquo;t an \u0026rsquo;ends all\u0026rsquo; way to being an expert in Python, of course, but the hands-on approach and the ease to which I was able to follow along, has made it easy to use what I learn from this course and apply it to further learning, so I recommend giving the course a try! "]]